<?phpob_start();/*    Plugin name: JAM_ITGREEN_VN    Version: 1.0    Description: Automatic setup News Post Type - News Funcion to template.    Author: ITGREEN    Author URI: http://itgreen.vn    Plugin URI: http://itgreen.vn*//* Version wordpress check*/    global $wp_version;    global $post;        $exit_msg='This Plugin require Wordpress 3.0 or newer.<a href="http://codex.wordpress.org/Upgrading_Wordpress"></a>';    if(version_compare($wp_version,"3.0","<"))    {        exit($exit_msg);    }     if(is_admin())  {    wp_register_style('myStyleSheets', plugins_url('/css/style_jamnews.css', __FILE__));    wp_enqueue_style( 'myStyleSheets');            /*-- date--*/           wp_register_style('farbtastic1', plugins_url('/css/farbtastic.css', __FILE__));    wp_register_script('farbtastic1', plugins_url("/js/farbtastic.js", __FILE__));         wp_register_style('myStyle_jqueryui', plugins_url('/css/jquery-ui-1.8.18.custom.css', __FILE__));    /*    wp_enqueue_script('my_script_jquery_handle', plugins_url("/js/jquery-1.7.1.min.js", __FILE__));*/    wp_register_script('my_script_jqueryui_handle', plugins_url("/js/jquery-ui-1.8.18.custom.min.js", __FILE__));    wp_register_script('my_script_jqueryui_time_handle', plugins_url("/js/jquery-ui-timepicker-addon.js", __FILE__));/*--end date --*/        wp_register_script('my_script_handle', plugins_url("/js/function.js", __FILE__));    wp_enqueue_script('my_script_handle', plugins_url("/js/function.js", __FILE__));     }/* Admin option page *//* Install News Jam Plugin */    global $newsjam_db_version;    $newsjam_db_version = '1.0';    $table_name = $wpdb->prefix . "newsjam";    $table_name_relate = $wpdb->prefix . "newsjam_relate";    function newsjam_install() {       global $wpdb;              global $table_name;       $sql = "CREATE TABLE $table_name (    	  id mediumint(9) NOT NULL AUTO_INCREMENT,    	  name VARCHAR(55) DEFAULT '' NOT NULL,    	  custom_type VARCHAR(55) DEFAULT '' NOT NULL,          editor VARCHAR(5) DEFAULT '',          excerpt VARCHAR(5) DEFAULT '',          thumnail VARCHAR(5) DEFAULT '',          comment VARCHAR(5) DEFAULT '',          author VARCHAR(5) DEFAULT '',    	  UNIQUE KEY id (id)        );";           require_once(ABSPATH . 'wp-admin/includes/upgrade.php');       dbDelta($sql);       }    function newsjam_install_relate(){        global $wpdb;        global $table_name_relate;        global $newsjam_db_version;       $sql = "CREATE TABLE $table_name_relate (    	  id mediumint(9) NOT NULL AUTO_INCREMENT,          option_id mediumint(9) NOT NULL,    	  khoa VARCHAR(55) DEFAULT '' NOT NULL,    	  giatri VARCHAR(55) DEFAULT '' NOT NULL,    	  UNIQUE KEY id (id)        );";           require_once(ABSPATH . 'wp-admin/includes/upgrade.php');       dbDelta($sql);            add_option("newsjam_db_version", $newsjam_db_version);    }///////////////////////FUNCTION///////////////////////////////////////////////////////////////    function newsjam_isert_data($title,$type,$editor,$excerpt,$thumnail,$author,$comments) {       global $wpdb;       global $table_name;              $rows_affected = $wpdb->insert( $table_name, array( 'name' => $title, 'custom_type' => $type, 'editor' => $editor, 'excerpt' => $excerpt, 'thumnail' => $thumnail, 'comment' => $comments, 'author' => $author ) );       return $rows_affected;    }    function newsjam_delete_data($id) {       global $wpdb;        global $table_name;       $sql="DELETE FROM ".$table_name." WHERE id = ".$id;       $query = $wpdb->query( $sql );       return $query;    }    function newsjam_getallid_data() {       global $wpdb;       global $table_name;       $sql="SELECT id FROM ".$table_name;       $query = $wpdb->get_results($sql);       return $query;    }    function newsjam_getall_data() {       global $wpdb;       global $table_name;       $sql="SELECT * FROM ".$table_name;       $query = $wpdb->get_results($sql);       return $query;    }    function get_option_by_type($type){        global $wpdb;        global $table_name;        $sql="SELECT * FROM ".$table_name." WHERE custom_type = '".$type."'";        $query = $wpdb->get_results($sql);        return $query;    }       function get_option_by_id($optionID){        global $wpdb;        global $table_name;        $sql="SELECT * FROM ".$table_name." WHERE id = '".$optionID."'";        $query = $wpdb->get_results($sql);        return $query;    }     function get_option_term_id($type){        global $wpdb;        global $table_name_relate;        $sql="SELECT id FROM ".$table_name_relate." WHERE giatri = '".$type."'";        $query = $wpdb->get_results($sql);        return $query;    }            function newsjam_isert_relate_data($optionid,$khoa,$giatri) {       global $wpdb;       global $table_name_relate;              $rows_affected = $wpdb->insert( $table_name_relate, array( 'option_id' => $optionid,'khoa' => $khoa, 'giatri' => $giatri ) );       return $rows_affected;    }    function newsjam_update_relate_data($optionid,$khoa,$giatri) {       global $wpdb;       global $table_name_relate;       $sql="UPDATE ".$table_name_relate."SET giatri ='".$giatri."' WHERE option_id = '".$optionid."' and khoa='".$khoa."'";              return $query;    }    function newsjam_get_relate_data($optionid,$khoa) {       global $wpdb;       global $table_name_relate;              $sql="SELECT * FROM ".$table_name_relate." WHERE option_id = '".$optionid."' and khoa='".$khoa."'";        $query = $wpdb->get_results($sql);        return $query;    }    function newsjam_getall_relate_data($optionid) {       global $wpdb;       global $table_name_relate;              $sql="SELECT * FROM ".$table_name_relate." WHERE option_id = '".$optionid."'";        $query = $wpdb->get_results($sql);        return $query;    }    function newsjam_getall_relate_term_data($giatri) {       global $wpdb;       global $table_name_relate;              $sql="SELECT * FROM ".$table_name_relate." WHERE giatri = '".$giatri."'";        $query = $wpdb->get_results($sql);        return $query;    }    function newsjam_getall_relate_data_bykhoa($khoa) {       global $wpdb;       global $table_name_relate;              $sql="SELECT * FROM ".$table_name_relate." WHERE khoa = '".$khoa."'";        $query = $wpdb->get_results($sql);        return $query;    }    function is_exits_relate_option($optionID,$khoa)    {        global $wpdb;        global $table_name_relate;               $sql="SELECT id FROM ".$table_name_relate." WHERE option_id = '".$optionid."' and khoa='".$khoa."'";        $query = $wpdb->get_results($sql);        $count=count($query);        if ($count >0) return true;        else return false;    }    function newsjam_delete_relate_data($optionid,$khoa) {       global $wpdb;       global $table_name_relate;       $sql="DELETE FROM ".$table_name_relate." WHERE option_id = ".$optionid." and khoa='".$khoa."'";       $query = $wpdb->query( $sql );       return $query;    }    function newsjam_delete_relate_data_byid($id) {       global $wpdb;       global $table_name_relate;       $sql="DELETE FROM ".$table_name_relate." WHERE id = ".$id;       $query = $wpdb->query( $sql );       return $query;    }    function newsjam_relate_delete_data($optionid) {       global $wpdb;       global $table_name_relate;       $sql="DELETE FROM ".$table_name_relate." WHERE option_id = '".$optionid."'";       $query = $wpdb->query( $sql );       return $query;    }////////////////////////////////////////////////////////////////////////////////////////////////////////if (is_admin()) {     $current_admin_page = substr(strrchr($_SERVER['PHP_SELF'], '/'),1, -4);     if ($current_admin_page == 'page' || $current_admin_page == 'page-new' || $current_admin_page == 'post' || $current_admin_page == 'post-new')     { /** * Need to force the form to have the correct enctype. */     function add_post_enctype()     {         echo "<script type='text/javascript'>        jQuery(document).ready(function(){ jQuery('#post').attr('enctype','multipart/form-data');         jQuery('#post').attr('encoding', 'multipart/form-data');        });        </script>";     }     add_action('admin_head', 'add_post_enctype');     } }////////////////////////////////////////////////////////////////////////////////////////////////////////        $installed_ver = get_option( "newsjam_db_version" );   if( $installed_ver != $newsjam_db_version ) {      newsjam_install_relate();      newsjam_install();           update_option( "newsjam_db_version", $newsjam_db_version );    }/*        function newsjam_update_db_check() {    global $newsjal_db_version;    if (get_site_option('newsjam_db_version') != $newsjam_db_version) {        newsjam_install_relate();        newsjam_install();        }    }    add_action('plugins_loaded', 'newsjam_update_db_check');*/    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// create custom plugin settings menuadd_action('admin_menu', 'newsjam_create_menu');function newsjam_create_menu() {    	//create new top-level menu    add_menu_page(__('News Jam','menu-jamnews'), __('News Jam','menu-jamnews'), 'manage_options', 'jamnews-top-level-handle', 'news_jam_settings_page',plugins_url('/images/st_logo.png', __FILE__) );        //ADD SUB MENU    $all_newsjam_option=newsjam_getall_data();    if(is_array($all_newsjam_option))    {                foreach($all_newsjam_option as $newsjam_option)        {            add_submenu_page('jamnews-top-level-handle', __($newsjam_option->name,'menu-jamnews'), __($newsjam_option->name,'menu-jamnews'), 'manage_options', $newsjam_option->custom_type, 'news_jam_submenu_settings_page');        }            }    add_submenu_page('jamnews-top-level-handle', __('Images size','menu-jamnews'), __('Images size','menu-jamnews'), 'manage_options', 'images-size', 'news_jam_submenu_settings_page1');    	//call register settings function	add_action( 'admin_init', 'register_mysettings' );    //add_submenu_page( 'news_jam_settings_page', 'My Plugin Option New', 'My Plugin', 'my-unique-identifier', 'manage_options');}function register_mysettings() {	//register our settings    register_setting( 'newsjam-settings-group', 'new_option_category' );    register_setting( 'newsjam-settings-group', 'new_option_custom_field' );    }function news_jam_settings_page() {    global $wp_db;    global $table_name;    include('jamnews-option.php');}function news_jam_submenu_settings_page() {    global $wp_db;    global $table_name;    include('jamnews-sub-option.php');} function news_jam_submenu_settings_page1() {    global $wp_db;    global $table_name;    include('jamnews-images-size.php');}/* ADMIN*//* Add Post Type*/                add_action('init', 'create_newsjam_post_type');        function tr_query_post_count($id_post_type)		{		    global $wpdb;				  $sql="SELECT count(*) as sl FROM `wp_newsjam_relate` WHERE `option_id` = ".$id_post_type." AND `khoa` LIKE '%field-name%'";			 		  $tr_kq = $wpdb->get_results($sql);				    foreach($tr_kq as $result)			{							  $kq=$result->sl;			  			}			 		    return $kq;		}	     function tr_query_post_all($id_post_type)		{		    global $wpdb;				  $sql="SELECT * FROM `wp_newsjam_relate` WHERE `option_id` = ".$id_post_type." AND `khoa` LIKE '%field-name%' order by id,khoa asc";		 		  $tr_kq = $wpdb->get_results($sql);		 		    return $tr_kq;		}		 function tr_list_taxonomy_type($option_id)		{		    global $wpdb;		  $sql="SELECT * FROM `wp_newsjam_relate` WHERE `khoa` LIKE '%taxonomy-type%' and option_id=$option_id order by id,khoa asc";		   $tr_kq = $wpdb->get_results($sql);	 			 		    return $tr_kq;		}        function create_newsjam_post_type()        {        global $wpdb;        $sql="SELECT * FROM wp_newsjam";        $all_newsjam_option = $wpdb->get_results($sql);            foreach($all_newsjam_option as $newsjam_option)            {   $name=$newsjam_option->name;                $type=$newsjam_option->custom_type;                                $editor=$newsjam_option->editor;                $excerpt=$newsjam_option->excerpt;                $thumnail=$newsjam_option->thumnail;                $comment=$newsjam_option->comment;                $author=$newsjam_option->author;                if($editor == 'on')                {                    $editor="editor";                }                if($excerpt == 'on')                {                    $excerpt="excerpt";                }                if($thumnail == 'on')                {                    $thumnail="thumbnail";                }                if($comment == 'on')                {                    $comment="comments";                }                if($author == 'on')                {                    $author="author";                }                $str_type= array('title',$editor,$excerpt,$thumnail,$comment,$author);                                 register_post_type($type,                  array(                    'labels'  =>  array(                      'name'  =>  __($name),                      'singular_name' =>  __($name),                      'add_new' =>  __('Thêm mới tin  '.$name),                      'add_new_item'  =>  __('Thêm mới tin '),                      'edit'  =>  __('Edit'),                      'edit_item' =>  __('Edit '),                      'new_item'  =>  __('New'),                      'view'  =>  __('View'),                      'view_item' =>  __('View Item'),                      'search_items' =>  __('Search '.$name),                      'not_found' =>  __('No news found'),                      'not_found_in_trash'  =>  __('No item found in Trash')                    ),                    'public'  =>  true,                    'show_ui' =>  true,                    'publicy_queryable' =>  true,                    'exclude_from_search' =>  true,                    'menu_position' => 4,                                        'hierarchical'  => false,                    'query_var' =>  true,                    'supports'  =>  array(),                    'rewrite' =>  array( 'slug' => $type, 'with_front' =>  false),                    'supports'  =>  $str_type,                    'can_export'  =>  true,                    //'register_meta_box_cb'  =>  'call_to_function_do_something',                    'description' =>  __($name.' description here.'),                    'has_archive' => true                                      )                );                 $tr_list_taxonomy_type=tr_list_taxonomy_type($newsjam_option->id);  				$tr_count=count($tr_list_taxonomy_type);								if($tr_count > 0) 				{					 foreach($tr_list_taxonomy_type as $tr_list_rs)    					{					  $i=str_replace("taxonomy-type","",$tr_list_rs->khoa);						$taxonomy='';						$khoa_type='taxonomy-type'.$i;						$khoa_name='taxonomy-name'.$i;						$taxonomy['type']=newsjam_get_relate_data($newsjam_option->id,$khoa_type);						if($taxonomy['type'][0]->giatri != '')						{							  $taxonomy['name']=newsjam_get_relate_data($newsjam_option->id,$khoa_name);								register_taxonomy($taxonomy['type'][0]->giatri, $type, array(									'hierarchical'  =>  true,									'labels'  =>  array(									'name'  =>  __($taxonomy['name'][0]->giatri),									'singular_name' =>  __($taxonomy['name'][0]->giatri),									'add_new' =>  __('Thêm mới tin'),									'add_new_item'  =>  __('Thêm mới tin '.$taxonomy['name'][0]->giatri),									'new_item'  =>  __($taxonomy['name'][0]->giatri),									'search_items' =>  __('Tìm kiếm '.$taxonomy['name'][0]->giatri),									),									'public'  =>  true,									'show_ui' =>  true,									'query_var' =>  $taxonomy['type'][0]->giatri,									'rewrite' =>  array('slug'  =>  $taxonomy['type'][0]->giatri, 'with_front' =>  false),								));                           						}					}					if(is_admin() && isset($_REQUEST["post_type"]))					{						if($type==$_REQUEST["post_type"])						{													add_action("manage_posts_custom_column", "my_custom_columns");						add_filter("manage_".$type."_posts_columns", "my_newsjam_columns");						/*add_filter( "manage_edit-".$type."_sortable_columns", "my_newsjam_order_id_columns" );						*/					  						 add_action( 'restrict_manage_posts', 'taxonomy_filter_restrict_manage_posts' );						 add_filter( 'parse_query', 'taxonomy_filter_post_type_request' );						}											}					}                				if(is_admin())				{					include_once(dirname (__FILE__) . '/jamnews-field-custom.php');					if(isset($_REQUEST['post_type']) || isset($_REQUEST['post']))					{						  if(!isset($_REQUEST["taxonomy"]))						{							add_action('admin_menu', 'add_meta_box_type');							add_action('save_post', 'save_type_meta_box', 1, 2);							/**********/													}											}					}                            				/*--------------------------------------------------------------------------------------------------------------*/            }                               }//    }            //////////////////////////////////////////////////////////////////////require_once("Tax-meta-class.php");if (is_admin() && isset($_REQUEST["taxonomy"])){    $newsjam_custom_ids =newsjam_getallid_data();    foreach($newsjam_custom_ids as $newsjam_custom_id)    {        for($d=1;$d<=8;$d++)                {                    $khoa_type='taxonomy-type'.$d;                    $term_slug=newsjam_get_relate_data($newsjam_custom_id->id,$khoa_type);                    if($term_slug[0]->giatri !='')                    {                        $term_array[]=$term_slug[0]->giatri;                    }                }            }    //print_r($term_array);    //print_r($term_array);  /*    * prefix of meta keys, optional   */  $prefix = '';    /*    * configure your meta box   */$count_arr=count($term_array);if($count_arr != 0 ){   foreach($term_array as $term_onl)  {      $config = array(    'id' => 'demo_meta_box',          // meta box id, unique per meta box    'title' => 'Demo Meta Box',          // meta box title    'pages' => array($term_onl),        // taxonomy name, accept categories, post_tag and custom taxonomies    'context' => 'normal',            // where the meta box appear: normal (default), advanced, side; optional    'fields' => array(),            // list of meta fields (can be added by field arrays)    'local_images' => false,          // Use local or hosted images (meta box images for add/remove)    'use_with_theme' => false          //change path if used with theme set to true, false for a plugin or anything else for a custom path(default false).  );      /*   * Initiate your meta box   */       $my_meta =  new Tax_Meta_Class($config);    /*   * Add fields to your meta box   */      $idterms=newsjam_getall_relate_term_data($term_onl);    foreach($idterms as $idterm)    {           for($b=1;$b<=8;$b++)        {            $key_term_meta_name="field_term_".$idterm->id."_name".$b;            $key_term_meta_slug="field_term_".$idterm->id."_slug".$b;            $key_term_meta_type="field_term_".$idterm->id."_type".$b;            //echo($term_onl);            $val_term_meta_name=newsjam_get_relate_data($idterm->option_id,$key_term_meta_name);            $val_term_meta_slug=newsjam_get_relate_data($idterm->option_id,$key_term_meta_slug);            $val_term_meta_type=newsjam_get_relate_data($idterm->option_id,$key_term_meta_type);            if($val_term_meta_name)            {//                echo $val_term_meta_name[0]->giatri;                if($val_term_meta_type[0]->giatri == 1)                {                    $my_meta->addText($prefix.$val_term_meta_slug[0]->giatri,array('name'=> $val_term_meta_name[0]->giatri));                }                 if($val_term_meta_type[0]->giatri == 2)                {                    $my_meta->addTextarea($prefix.$val_term_meta_slug[0]->giatri,array('name'=> $val_term_meta_name[0]->giatri));                }                if($val_term_meta_type[0]->giatri == 3)                {                    $my_meta->addCheckbox($prefix.$val_term_meta_slug[0]->giatri,array('name'=> $val_term_meta_name[0]->giatri));                }                if($val_term_meta_type[0]->giatri == 4)                {                    $my_meta->addDate($prefix.$val_term_meta_slug[0]->giatri,array('name'=> $val_term_meta_name[0]->giatri));                }                if($val_term_meta_type[0]->giatri == 5)                {                    $my_meta->addTime($prefix.$val_term_meta_slug[0]->giatri,array('name'=> $val_term_meta_name[0]->giatri));                }                if($val_term_meta_type[0]->giatri == 6)                {                    $my_meta->addColor($prefix.$val_term_meta_slug[0]->giatri,array('name'=> $val_term_meta_name[0]->giatri));                }                                  if($val_term_meta_type[0]->giatri == 7)                {                    $my_meta->addImage($prefix.$val_term_meta_slug[0]->giatri,array('name'=> $val_term_meta_name[0]->giatri));                }                if($val_term_meta_type[0]->giatri == 8)                {                    $my_meta->addFile($prefix.$val_term_meta_slug[0]->giatri,array('name'=> $val_term_meta_name[0]->giatri));                }                             }        }    }    //print_r($idterms);  /*  //text field  $my_meta->addText($prefix.'text_field_id',array('name'=> 'My Text '));  //textarea field  $my_meta->addTextarea($prefix.'textarea_field_id',array('name'=> 'My Textarea '));  //checkbox field  $my_meta->addCheckbox($prefix.'checkbox_field_id',array('name'=> 'My Checkbox '));  //select field  //$my_meta->addSelect($prefix.'select_field_id',array('selectkey1'=>'Select Value1','selectkey2'=>'Select Value2'),array('name'=> 'My select ', 'std'=> array('selectkey2')));  //radio field  //$my_meta->addRadio($prefix.'radio_field_id',array('radiokey1'=>'Radio Value1','radiokey2'=>'Radio Value2'),array('name'=> 'My Radio Filed', 'std'=> array('radionkey2')));  //date field  $my_meta->addDate($prefix.'date_field_id',array('name'=> 'My Date '));  //Time field  $my_meta->addTime($prefix.'time_field_id',array('name'=> 'My Time '));  //Color field  $my_meta->addColor($prefix.'color_field_id',array('name'=> 'My Color '));  //Image field  $my_meta->addImage($prefix.'image_field_id',array('name'=> 'My Image '));  //file upload field  $my_meta->addFile($prefix.'file_field_id',array('name'=> 'My File '));  //wysiwyg field  $my_meta->addWysiwyg($prefix.'wysiwyg_field_id',array('name'=> 'My wysiwyg Editor '));  //taxonomy field  $my_meta->addTaxonomy($prefix.'taxonomy_field_id',array('taxonomy' => 'category'),array('name'=> 'My Taxonomy '));  //posts field  $my_meta->addPosts($prefix.'posts_field_id',array('args' => array('post_type' => 'page')),array('name'=> 'My Posts '));  */  /*   * To Create a reapeater Block first create an array of fields   * use the same functions as above but add true as a last param   */  /*  $repeater_fields[] = $my_meta->addText($prefix.'re_text_field_id',array('name'=> 'My Text '),true);  $repeater_fields[] = $my_meta->addTextarea($prefix.'re_textarea_field_id',array('name'=> 'My Textarea '),true);  $repeater_fields[] = $my_meta->addCheckbox($prefix.'re_checkbox_field_id',array('name'=> 'My Checkbox '),true);  $repeater_fields[] = $my_meta->addImage($prefix.'image_field_id',array('name'=> 'My Image '),true);  */  /*   * Then just add the fields to the repeater block   */  //repeater block  //$my_meta->addRepeaterBlock($prefix.'re_',array('inline' => true, 'name' => 'This is a Repeater Block','fields' => $repeater_fields));  /*   * Don't Forget to Close up the meta box decleration   */     //Finish Meta Box Decleration  $my_meta->Finish();  }}    }?>